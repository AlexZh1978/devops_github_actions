// Импортируем фреймворк Express из установленных зависимостей.
// Express упрощает создание HTTP‑серверов и маршрутов в Node.js.
import express from 'express';

// Создаём экземпляр приложения Express.
// Этот объект будет использоваться для настройки маршрутов, middleware и запуска сервера.
const app = express();

// Определяем порт, на котором будет работать сервер.
// process.env.PORT — значение из переменных окружения (удобно для Docker, Heroku, Kubernetes).
// Если переменная не задана, используем порт 4545 по умолчанию.
const PORT = process.env.PORT || 4545;

// Регистрируем GET‑маршрут по адресу /ping.
// req — объект запроса (Request), res — объект ответа (Response).
// Этот маршрут часто используют как health‑check для проверки, что сервис жив.
app.get('/ping', (req, res) => {
  // Отправляем клиенту JSON‑ответ.
  // Переданный объект { message: 'pong' } Express автоматически:
  //  1. Преобразует в строку JSON.
  //  2. Установит заголовок Content-Type: application/json.
  //  3. Вернёт HTTP‑код 200 OK (если не задан другой).
  // Такой ответ удобен для мониторинга, CI‑тестов и Kubernetes livenessProbe.
  res.send({ message: 'pong', version: '1.0.0' });
});

// Запускаем сервер на указанном порту.
// Второй аргумент — callback, который выполнится после успешного запуска.
// Здесь выводим в консоль URL для удобства разработчика.
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

// Экспортируем app по умолчанию.
// Это позволяет подключать приложение в тестах (например, с supertest)
// без необходимости запускать сервер на реальном порту.
export default app;
