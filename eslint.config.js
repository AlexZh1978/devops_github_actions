// Импортируем пакет "globals" — он содержит готовые списки глобальных переменных
// для разных окружений (Node.js, браузер, ES2021 и т.д.).
// Это нужно, чтобы ESLint знал, какие глобальные переменные допустимы,
// и не ругался на их использование (например, process, __dirname).
import globals from "globals";

// Импортируем функцию defineConfig из пакета "eslint/config".
// Она помогает описывать конфигурацию ESLint с автодополнением и проверкой типов,
// что снижает риск ошибок в конфиге.
import { defineConfig } from "eslint/config";

// Экспортируем конфигурацию ESLint по умолчанию.
// defineConfig принимает массив конфигураций — это позволяет задавать разные правила
// для разных групп файлов, если нужно.
export default defineConfig([
  {
    // ignores — список путей и файлов, которые ESLint будет игнорировать.
    // Это ускоряет проверку и исключает лишние предупреждения.
    ignores: [
      "node_modules/**",   // Папка с зависимостями — линтить её нет смысла.
      "dist/**",           // Сборка фронтенда или бандл — генерируется автоматически.
      "build/**",          // Артефакты сборки (Node.js или фронтенд).
      "coverage/**",       // Отчёты покрытия тестами — генерируются автоматически.
      "*.min.js",          // Минифицированные JS-файлы — их не редактируют вручную.
      "package-lock.json"  // Lock-файл npm — не является исходным кодом.
    ],

    // files — маска файлов, к которым будут применяться правила.
    // Здесь указаны все JS-файлы, включая модули ESM (.mjs) и CommonJS (.cjs).
    files: ["**/*.{js,mjs,cjs}"],

    // languageOptions — настройки языка для ESLint.
    languageOptions: {
      // globals — список глобальных переменных, которые можно использовать без объявления.
      // Здесь подключаем глобали для Node.js (process, Buffer, __dirname и т.д.).
      globals: globals.node,

      // ecmaVersion — версия стандарта ECMAScript, которую поддерживает проект.
      // 2022 = ES13, включает современные возможности языка.
      ecmaVersion: 2022,

      // sourceType — тип модулей. "module" означает, что используется ESM (import/export).
      sourceType: "module"
    },

    // rules — набор правил ESLint для проверки кода.
    rules: {
      // "no-console": "warn" — предупреждать, если в коде есть console.log и т.п.
      // Полезно, чтобы случайно не оставить отладочные логи в продакшене.
      "no-console": "warn",

      // "no-unused-vars": "warn" — предупреждать о неиспользуемых переменных.
      // Это помогает держать код чистым и избегать мёртвого кода.
      "no-unused-vars": "warn",

      // "prefer-const": "error" — выдавать ошибку, если переменная не изменяется,
      // но объявлена через let. Требует использовать const для неизменяемых значений.
      "prefer-const": "error"
    }
  },
]);
