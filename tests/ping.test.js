// Импортируем функции describe, it и expect из Vitest.
//  - describe(...) группирует тесты по смыслу (создаёт "сценарий").
//  - it(...) описывает конкретный тестовый случай.
//  - expect(...) используется для проверки (assertion) результата.
import { describe, it, expect } from 'vitest';

// Импортируем функцию request из библиотеки supertest.
// Она позволяет отправлять HTTP‑запросы к приложению Express напрямую,
// без запуска сервера на реальном порту.
import request from 'supertest';

// Импортируем экземпляр приложения Express из нашего кода.
// Так тесты могут работать с app напрямую, что ускоряет проверку
// и упрощает интеграционные тесты.
import app from '../src/index.js';

// Группируем тесты, относящиеся к маршруту GET /ping.
// Первый аргумент — описание группы, второй — функция с тестами.
describe('GET /ping', () => {
  
  // Определяем тестовый случай: "должен вернуть pong".
  // async — потому что внутри будет асинхронный HTTP‑запрос.
  it('should return pong', async () => {
    //  Если в одном из вызовов expect(...) проверка не проходит, Vitest (как и Jest, на API которого он похож) считает 
    // этот тест проваленным и:
   // Останавливает выполнение текущего теста
   // Код после неудачного expect в этом же it(...) уже не выполнится.
   // Это потому, что expect при несоответствии бросает исключение (AssertionError), и управление переходит в обработчик 
   // тестового раннера.
   // Помечает тест как "failed"
   // В отчёте Vitest этот тест будет выделен красным, с указанием:
   // Какое именно ожидание не совпало.
   // Что было ожидаемо (Expected) и что реально пришло (Received).
   // Стек вызовов, чтобы понять, где именно в коде теста произошла ошибка.
   // Продолжает выполнение других тестов
   // Остальные it(...) в этом же describe(...) или в других файлах будут выполнены, 
   // если только ты не запустил Vitest с флагом --bail (тогда он остановится на первой ошибке).
   
  // Отправляем GET‑запрос на /ping к нашему приложению через supertest.
   // request(app) создаёт тестовый клиент, .get('/ping') — выполняет запрос.
    const res = await request(app).get('/ping');
    
    // Проверяем, что HTTP‑код ответа равен 200 (OK).
    expect(res.statusCode).toBe(200);
    
    // Проверяем, что в теле ответа есть поле message со значением 'pong'.
    // res.body — это уже распарсенный JSON‑ответ от сервера.
    expect(res.body.message).toBe('pong');

 });
});
